// <auto-generated />
using CoderUlWPFApplication.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoderUlWPFApplication.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180718173433_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("CoderUlWPFApplication.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(655);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CoderUlWPFApplication.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(655);

                    b.Property<int>("NotificationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 1, Message = "Тестовое напоминание 1", NotificationTypeId = 1 },
                        new { Id = 2, Message = "Тестовое напоминание 2", NotificationTypeId = 1 },
                        new { Id = 3, Message = "Тестовое напоминание 3", NotificationTypeId = 2 },
                        new { Id = 4, Message = "Тестовое напоминание 4", NotificationTypeId = 3 }
                    );
                });

            modelBuilder.Entity("CoderUlWPFApplication.Models.NotificationLocation", b =>
                {
                    b.Property<int>("LocationId");

                    b.Property<int>("NotificationId");

                    b.HasKey("LocationId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationLocation");
                });

            modelBuilder.Entity("CoderUlWPFApplication.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageName")
                        .HasMaxLength(655);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new { Id = 1, ImageName = "Alert_type_water_leak.png", Name = "Протечка воды" },
                        new { Id = 2, ImageName = "Alert_type_temperature.png", Name = "Температура" },
                        new { Id = 3, ImageName = "Alert_type_fire.png", Name = "Пожарная сигнализация" }
                    );
                });

            modelBuilder.Entity("CoderUlWPFApplication.Models.Notification", b =>
                {
                    b.HasOne("CoderUlWPFApplication.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoderUlWPFApplication.Models.NotificationLocation", b =>
                {
                    b.HasOne("CoderUlWPFApplication.Models.Location", "Location")
                        .WithMany("NotificationLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoderUlWPFApplication.Models.Notification", "Notification")
                        .WithMany("NotificationLocations")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
